// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package handler_test is a generated GoMock package.
package handler_test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	multiplexer "github.com/vlad161/multiplexer/internal/service/multiplexer"
	reflect "reflect"
)

// MockMultiplexer is a mock of Multiplexer interface
type MockMultiplexer struct {
	ctrl     *gomock.Controller
	recorder *MockMultiplexerMockRecorder
}

// MockMultiplexerMockRecorder is the mock recorder for MockMultiplexer
type MockMultiplexerMockRecorder struct {
	mock *MockMultiplexer
}

// NewMockMultiplexer creates a new mock instance
func NewMockMultiplexer(ctrl *gomock.Controller) *MockMultiplexer {
	mock := &MockMultiplexer{ctrl: ctrl}
	mock.recorder = &MockMultiplexerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMultiplexer) EXPECT() *MockMultiplexerMockRecorder {
	return m.recorder
}

// Urls mocks base method
func (m *MockMultiplexer) Urls(ctx context.Context, urls []string) (multiplexer.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Urls", ctx, urls)
	ret0, _ := ret[0].(multiplexer.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Urls indicates an expected call of Urls
func (mr *MockMultiplexerMockRecorder) Urls(ctx, urls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Urls", reflect.TypeOf((*MockMultiplexer)(nil).Urls), ctx, urls)
}
